options {Ignore_Case = false; }
//parte sintactica
PARSER_BEGIN (Analizador)
public class Analizador {

public static void main (String [] args)  {
	try{
		Analizador anLexSint = new Analizador (System.in);
		anLexSint.anProgram();
		System.out.println("Fichero analizado");
		System.out.println("No se han detectado errores lexico-sintacticos");
	}
	catch (ParseException eSintactico) {
		System.out.println("Analisis suspendido.");
		System.out.println ("Hallado un error sintactico:"); 
		System.out.println (eSintactico.getMessage()); 
	}
	catch (TokenMgrError eLexico) {
		System.out.println("Analisis suspendido."); 
		System.out.println ("Hallado un error lexico-grafico:"); 
		System.out.println (eLexico.getMessage());
	} 
}
}
PARSER_END (Analizador)

						//DEFINICION SINTACTICA

void anProgram(): {} { "programa" <Id> <Llaveabrir> [anCuerpo()] <Llavecerrar> <EOF>  }

void anCuerpo(): {} { secuenciaComponentes()}


void secuenciaComponentes() :  {} {   <Id> asigDeclar() 
							| senLeer() secuenciaComponentes()
							| senEscribir() secuenciaComponentes() }

void asigDeclar() : {} { senAsignacion()secuenciaComponentes()  | senDeclaracion() cualquierSentencia()}


void cualquierSentencia() : {} { [<Id> restoDeclaracion()
								| senLeer() cualquierSentencia()
								| senEscribir() cualquierSentencia()] }

void restoDeclaracion() : {} { senAsignacion()cualquierSentencia() | senDeclaracion()cualquierSentencia()}

//especificación de las 4 sentencias:
void senAsignacion(): {} { <Asignar> expresion() <PuntoyComa> }
void senDeclaracion():{} { (<Coma> <Id>)* palabraReservada() <PuntoyComa>}	
void senLeer(): {} { "leer" <ParentesisAbrir> <Id> (<Coma><Id>)* <ParentesisCerrar> <PuntoyComa> }
void senEscribir(): {} {"escribir" <ParentesisAbrir> [restoEscribir()] <ParentesisCerrar> <PuntoyComa> }							  							
void restoEscribir(): {} { expresion() (<Coma> expresion())* }



//especificación de las expresiones:
void expresion(): {} { termino() (opAdt() termino())* }
void opAdt(): {} { "+"|"-" } 
void termino(): {} { factor() (opMul() factor())* }
void opMul(): {} { "*"|"/" }
void factor(): {} { [opSig()] operando() }
void opSig(): {} { "-" }
void operando(): {} { <Id> 
					  |<CEntera>
					  | <CDecimal> 
					  | <Clogica>
					  | <ParentesisAbrir> expresion() <ParentesisCerrar>  }	

void palabraReservada(): {} { <Entero>|<Real>|<Logico> }


						//DEFINICION LEXICA 
TOKEN: { < # LetraMayus : ["A"-"Z"] > 
		 |< # LetraMinus : ["a"-"z"] > 
		 |< # LetrasMayusMinus : <LetraMayus> | <LetraMinus> > }

TOKEN: { < # Sincero : ["1"-"9"] > 
		 |< # Digito : ["0"-"9"] >  
		 |< # Alfanumerico: <LetrasMayusMinus> | ["0"-"9"] > } 

TOKEN: { < Entero:"entero" >
		 |< Real: "real" >
 		 |< Logico: "logico" >
 		 |< Clogica: "true" | "false" > 
 		 |< CEntera: (<Sincero> (<Digito>)*) | ("0")+ > 
		 |< CDecimal: ((<Sincero> (<Digito>)*)|"0") "."(( (<Digito>)* <Sincero> )| "0") > 
		 |< Id: (<LetrasMayusMinus>("_")?) (<Alfanumerico>("_")?)* > }

TOKEN: { < Asignar : "=" > 
       	|< Llaveabrir : "{" >
       	|< Llavecerrar : "}" >    
       	|< ParentesisAbrir : "(" >
       	|< ParentesisCerrar : ")" >
       	|< Coma: ",">
       	|< PuntoyComa: ";"> }

SKIP:  {< " " | "\t" | "\n" | "\r\n" > } 
SKIP:  {< "/-"(~["/","\n","\r"]|(("/")+~["-","/","\n","\r"]))+("/")*> }

//SKIP: {< "/*" (~["*"])*("*")+ (~["*","/"](~["*"])*("*")+)* "/">}
